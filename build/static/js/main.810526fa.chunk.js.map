{"version":3,"sources":["components/utils/timeParser.ts","dataGetPost.ts","useResizeObserver.ts","components/multiLineChart.js","redux/content/contentTypes.js","components/inputModal/inputModal.tsx","components/utils/capitalizeFirstLetter.ts","components/utils/timePadding.ts","components/formikContainer.tsx","redux/content/contentActions.ts","components/checkbox.js","components/404.js","App.tsx","redux/content/dataReducer.ts","redux/store.js","index.tsx"],"names":["parseTime","timeParse","TimeParser","data","forEach","d","x","fetchDataPoints","a","fetch","json","postDataPoint","conf","method","headers","body","JSON","stringify","response","ok","console","log","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","unobserve","MultiLineChart","highlightedLines","svgRef","useRef","wrapperRef","currentZoomState","setCurrentZoomState","svg","select","getBoundingClientRect","width","height","lines","max","avg","min","keys","Object","filter","e","formatDate","timeFormat","bisectDate","bisector","left","formatValue","format","sort","b","xScale","scaleTime","range","domain","extent","newXScale","rescaleX","yScale","scaleLinear","z","scaleOrdinal","schemeCategory10","lineGenerator","line","curve","curveCardinal","y","measures","xAxis","axisBottom","tickFormat","ticks","append","attr","transition","duration","call","selectAll","yAxis","axisLeft","focus","style","metrics","map","id","values","c","nice","tickSize","join","_","i","on","mousemove","tooltip","zooming","x0","invert","pointer","this","d0","d1","text","setTimeout","zoomBehavior","zoom","scaleExtent","translateExtent","event","zoomState","transform","Fragment","display","overflow","className","FETCH_DATA","ADD_NEW_DATA","HIGHLIGHT_LINE","Modal","isOpen","onClose","children","outsideRef","React","onClick","target","Button","capitalizeFirstLetter","string","charAt","toUpperCase","slice","padding","time","number_of_digits","useStyles","makeStyles","createStyles","root","maxWidth","margin","textField","submitButton","marginTop","title","textAlign","successMessage","color","errorMessage","formStatusProps","success","message","type","error","processing","FormikContainer","classes","newDataPoint","setNewDataPoint","displayFormStatus","setDisplayFormStatus","formStatus","setFormStatus","dispatch","useDispatch","payload","createNewDataPoint","resetForm","dataObject","date","parsedData","status","duplicate","initialValues","seconds","milliseconds","onSubmit","actions","dateFormat","concat","toString","setSubmitting","validationSchema","Yup","shape","required","integer","props","touched","errors","handleBlur","handleChange","isSubmitting","Grid","container","justify","direction","item","lg","md","sm","xs","TextField","name","label","value","inputProps","maxLength","helperText","onChange","onBlur","InputLabelProps","shrink","variant","disabled","CustomCheckbox","state","setState","checked","FormGroup","row","FormControlLabel","control","Checkbox","ErrorMessage","href","App","useSelector","isLoading","setIsLoading","setError","then","length","fetchData","isModalOpen","setModalState","toggleModal","initialState","dataReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.810526fa.chunk.js","sourcesContent":["import {timeParse} from \"d3\";\r\nimport {DataPoint} from \"../../App\";\r\n\r\nconst parseTime = timeParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\r\nconst TimeParser = (data: Array<DataPoint>) => {\r\n\r\n    data.forEach(function(d: DataPoint) {\r\n        if(typeof d.x === \"string\")\r\n            d.x = parseTime(d.x)!;\r\n        return d;\r\n    });\r\n    return data;\r\n};\r\n\r\nexport default TimeParser","// fetch data points from konuxdata endpoint\r\n\r\nimport {DataPoint} from \"./App\";\r\nimport TimeParser from \"./components/utils/timeParser\";\r\n\r\nexport const fetchDataPoints = async (): Promise<Array<DataPoint>> => {\r\n    const endpoint: string = 'https://konuxdata.getsandbox.com/values';\r\n    try {\r\n        const data = await (await fetch(endpoint)).json();\r\n        return TimeParser(data);\r\n    } catch (e) {\r\n        return []\r\n    }\r\n};\r\n\r\nexport const postDataPoint = async (data: DataPoint): Promise<Response | undefined> => {\r\n    const endpoint: string = 'https://konuxdata.getsandbox.com/points';\r\n    const conf = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    const response = await fetch(endpoint, conf);\r\n    const json = await response.json();\r\n    if (response.ok) {\r\n        return json;\r\n    } else {\r\n        console.log(\"error\");\r\n    }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\n/**\r\n * Hook, that returns the current dimensions of an HTML element.\r\n * Doesn't play well with SVG.\r\n */\r\n\r\nconst useResizeObserver = (ref: { current: any; }) => {\r\n    const [dimensions, setDimensions] = useState(null) ;\r\n    useEffect(() => {\r\n        const observeTarget = ref.current;\r\n        const resizeObserver: ResizeObserver = new ResizeObserver(entries => {\r\n            entries.forEach(entry => {\r\n                // @ts-ignore\r\n                setDimensions(entry.contentRect);\r\n            });\r\n        });\r\n        resizeObserver.observe(observeTarget);\r\n        return () => {\r\n            resizeObserver.unobserve(observeTarget);\r\n        };\r\n    }, [ref]);\r\n    return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;","import React, {useRef, useEffect, useState} from \"react\";\r\nimport {\r\n    select,\r\n    scaleLinear,\r\n    scaleTime,\r\n    scaleOrdinal,\r\n    line,\r\n    max,\r\n    min,\r\n    extent,\r\n    pointer,\r\n    curveCardinal,\r\n    schemeCategory10,\r\n    axisBottom,\r\n    axisLeft,\r\n    timeFormat,\r\n    bisector,\r\n    format, zoom,\r\n} from \"d3\";\r\nimport useResizeObserver from \"../useResizeObserver\";\r\n\r\n\r\n/**\r\n LineChart Component\r\n */\r\n\r\nfunction MultiLineChart({ data, highlightedLines }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [currentZoomState, setCurrentZoomState] = useState();\r\n\r\n    // render chart on the first load and on every data/resizing change\r\n    useEffect(() => {\r\n\r\n        const svg = select(svgRef.current);\r\n        const { width, height } = dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n        // highlighted lines with order\r\n        const lines = {\r\n            max: highlightedLines.lines.max,\r\n            avg: highlightedLines.lines.avg,\r\n            min: highlightedLines.lines.min\r\n        }\r\n\r\n        const keys = Object.keys(lines).filter((e) => {return lines[e];});\r\n\r\n        const formatDate = timeFormat(\"%Y-%m-%d %H:%M:%S.%L\"),\r\n              bisectDate = bisector(d => d.x).left,\r\n              formatValue = format(\",.0f\");\r\n\r\n        // sort data in ascending order\r\n        data.sort((a,b) => {return a.x - b.x});\r\n\r\n        // scales\r\n        const xScale = scaleTime()\r\n            .range([0, width + 1])\r\n            .domain(extent(data, d => d.x));\r\n\r\n        if (currentZoomState) {\r\n            const newXScale = currentZoomState.rescaleX(xScale);\r\n            xScale.domain(newXScale.domain());\r\n        }\r\n\r\n        const yScale = scaleLinear()\r\n            .range([height, 0]);\r\n\r\n        const z = scaleOrdinal(schemeCategory10)\r\n            .domain([\"max\", \"avg\", \"min\"]);\r\n\r\n        // line generator\r\n        const lineGenerator = line()\r\n            .curve(curveCardinal)\r\n            .x(d => xScale(d.x))\r\n            .y(d => yScale(d.measures));\r\n\r\n        // axes\r\n        const xAxis = axisBottom(xScale)\r\n            .tickFormat(timeFormat(\"%d %b\"))\r\n            .ticks(5);\r\n\r\n        svg.append(\"defs\").append(\"clipPath\")\r\n            .attr(\"id\", \"clip\")\r\n            .append(\"rect\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        svg.select(\".x-axis\")\r\n            .attr(\"transform\", `translate(0, ${height})`)\r\n            .transition().duration(1000)\r\n            .call(xAxis)\r\n            .selectAll(\"text\")\r\n            .attr(\"text-anchor\", \"middle\");\r\n\r\n        const yAxis = axisLeft(yScale);\r\n        svg.select(\".y-axis\")\r\n            .call(yAxis);\r\n\r\n        const focus = svg.append(\"g\")\r\n            .attr(\"class\", \"focus\")\r\n            .attr(\"clip-path\", \"url(#clipPath)\") // clip the rectangle\r\n            .style(\"display\", \"none\");\r\n\r\n        focus.append(\"line\").attr(\"class\", \"lineHover\")\r\n            .style(\"stroke\", \"#999\")\r\n            .attr(\"stroke-width\", 1)\r\n            .style(\"shape-rendering\", \"crispEdges\")\r\n            .style(\"opacity\", 0.5)\r\n            .attr(\"y1\", -height)\r\n            .attr(\"y2\",0);\r\n\r\n        focus.append(\"text\").attr(\"class\", \"lineHoverDate\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"font-size\", 12)\r\n            .attr(\"font-family\", \"Verdana\")\r\n            .attr(\"fill\", \"#2b2929\");\r\n\r\n        svg.append(\"rect\")\r\n            .attr(\"class\", \"overlay\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        // Restructuring data\r\n        const metrics = keys.map(function(id) {\r\n            return {\r\n                id: id,\r\n                values: data.map(d => {return {x: d.x, measures: +d[id]}})\r\n            };\r\n        });\r\n\r\n        yScale.domain([\r\n                min(metrics, d => min(d.values, c => c.measures)),\r\n                max(metrics, d => max(d.values, c => c.measures))\r\n        ]).nice();\r\n\r\n        svg.selectAll(\".y-axis\")\r\n            .call(axisLeft(yScale).tickSize(-width));\r\n\r\n        svg.selectAll(\".metrics\")\r\n            .data(metrics)\r\n            .join(\"path\")\r\n            .attr(\"class\", \"line metrics\")\r\n            .attr(\"clip-path\", \"url(#clip)\")\r\n            .style(\"stroke\", d => z(d.id))\r\n            .transition().duration(750)\r\n            .attr(\"d\", d => lineGenerator(d.values))\r\n            .attr(\"clip-path\", \"url(#clip)\");\r\n\r\n        tooltip(keys);\r\n\r\n        function tooltip(keys) {\r\n\r\n            focus.selectAll(\".lineHoverText\")\r\n                .data(keys)\r\n                .join(\"text\")\r\n                .attr(\"class\", \"lineHoverText\")\r\n                .style(\"fill\", d => z(d))\r\n                .attr(\"text-anchor\", \"start\")\r\n                .attr(\"font-size\", 12)\r\n                .attr(\"dy\", (_, i) => 1 + i * 2 + \"em\");\r\n\r\n            focus.selectAll(\".hoverCircle\")\r\n                .data(keys)\r\n                .join(\"circle\")\r\n                .attr(\"class\", \"hoverCircle\")\r\n                .style(\"fill\", d => z(d))\r\n                .attr(\"r\", 2.5);\r\n\r\n            svg.selectAll(\".overlay\")\r\n                .on(\"mouseout\", function () {\r\n                    focus.style(\"display\", \"none\");\r\n                })\r\n                .on(\"mousemove\", mousemove);\r\n        }\r\n\r\n        // prevent a potential tooltip disorder caused at the very beginning of rendering\r\n        let zooming = true;\r\n        setTimeout(() => zooming = false, 100)\r\n\r\n            function mousemove(e) {\r\n\r\n                // disable this while zooming\r\n                if(zooming) return;\r\n\r\n                // show focus element including tooltip\r\n                focus.style(\"display\", null);\r\n\r\n                let x0 = xScale.invert(pointer(e, this)[0]);\r\n                let i = bisectDate(data, x0, 1),\r\n                    d0 = data[i - 1],\r\n                    d1 = data[i],\r\n                    d = x0 - d0.x > d1.x - x0 ? d1 : d0;\r\n\r\n                focus.selectAll(\".lineHover\")\r\n                    .attr(\"transform\", \"translate(\" + xScale(d.x) + \",\" + height + \")\");\r\n\r\n                focus.select(\".lineHoverDate\")\r\n                    .attr(\"transform\", \"translate(\" + xScale(d.x) + \",\" + (height + 45) + \")\")\r\n                    .text(formatDate(d.x));\r\n\r\n                focus.selectAll(\".hoverCircle\")\r\n                    .attr(\"cy\", e => yScale(d[e]))\r\n                    .attr(\"cx\", xScale(d.x));\r\n\r\n                focus.selectAll(\".lineHoverText\")\r\n                    .attr(\"transform\", \"translate(\" + (xScale(d.x)) + \",\" + height / 2.5 + \")\")\r\n                    .text(e => e + \" \" + formatValue(d[e]));\r\n\r\n                xScale(d.x) > (width - width / 4)\r\n                    ? focus.selectAll(\"text.lineHoverText\")\r\n                        .attr(\"text-anchor\", \"end\")\r\n                        .attr(\"dx\", -10)\r\n                    : focus.selectAll(\"text.lineHoverText\")\r\n                        .attr(\"text-anchor\", \"start\")\r\n                        .attr(\"dx\", 10)\r\n            }\r\n\r\n        // zoom\r\n        const zoomBehavior = zoom()\r\n            .scaleExtent([1, 5])\r\n            .translateExtent([\r\n                [0, 0],\r\n                [width, height],\r\n            ])\r\n            .on(\"zoom\", (event) => {\r\n                zooming = true;\r\n                focus.style(\"display\", \"none\");\r\n                const zoomState = event.transform;\r\n                setCurrentZoomState(zoomState);\r\n            })\r\n            .on(\"end\", () => setTimeout(() => {\r\n                zooming = false;\r\n            }, 3000));\r\n\r\n        svg.call(zoomBehavior);\r\n\r\n    }, [data, dimensions, highlightedLines, currentZoomState]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div ref={wrapperRef}>\r\n                <svg ref={svgRef} style={{display: \"block\", width: \"100%\", height: \"410px\", overflow: \"visible\"}}>\r\n                    <g className=\"x-axis\" />\r\n                    <g className=\"y-axis\" />\r\n                </svg>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MultiLineChart;","// Thee types of actions: *fetch data from API*  *add new data*  *highlight data lines*\r\n\r\nexport const FETCH_DATA = 'FETCH_DATA';\r\nexport const ADD_NEW_DATA = 'ADD_NEW_DATA';\r\nexport const HIGHLIGHT_LINE = 'HIGHLIGHT_LINE';\r\n\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport './inputModal.css';\r\n\r\ninterface ModalProps {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {\r\n    const outsideRef = React.useRef(null);\r\n\r\n    const handleCloseOnOverlay = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n        if (e.target === outsideRef.current) {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    return isOpen ? (\r\n        <div className={'modal'}>\r\n            <div ref={outsideRef} className={'modal__overlay'} onClick={handleCloseOnOverlay}/>\r\n            <div className={'modal__box'}>\r\n                <Button className={'modal__close'} onClick={onClose}>\r\n                    <CloseIcon/>\r\n                </Button>\r\n                <div className={'modal__content'}>{ children }</div>\r\n            </div>\r\n        </div>\r\n) : null;\r\n};\r\n\r\nexport default Modal;","const capitalizeFirstLetter = (string: string) : string => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport default capitalizeFirstLetter","const padding = (time: string, number_of_digits: number) : string => {\r\n    return ('00' + time).slice(-number_of_digits);\r\n}\r\n\r\nexport default padding","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {addNewData} from \"../redux/content/contentActions\";\r\nimport {postDataPoint} from \"../dataGetPost\";\r\nimport {Grid, TextField, Button, makeStyles, createStyles,} from '@material-ui/core';\r\nimport { Formik, Form, FormikProps } from 'formik'\r\nimport * as Yup from 'yup';\r\nimport {DataPoint} from \"../App\";\r\nimport {timeParse} from \"d3\";\r\nimport capitalizeFirstLetter from \"./utils/capitalizeFirstLetter\";\r\nimport padding from \"./utils/timePadding\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: '450px',\r\n            display: 'block',\r\n            margin: '0 auto',\r\n        },\r\n        textField: {\r\n            '& > *': {\r\n                width: '100%',\r\n            },\r\n        },\r\n        submitButton: {\r\n            marginTop: '24px',\r\n        },\r\n        title: { textAlign: 'center' },\r\n        successMessage: { color: 'green' },\r\n        errorMessage: { color: 'red' },\r\n    })\r\n);\r\n\r\ninterface FormStatus {\r\n    date: string | \"\",\r\n    avg: number | \"\",\r\n    min: number | \"\",\r\n    max: number | \"\",\r\n    seconds: number | \"\",\r\n    milliseconds: number | \"\"\r\n}\r\n\r\ninterface IFormStatus {\r\n    message: string\r\n    type: string\r\n}\r\n\r\ninterface IFormStatusProps {\r\n    [key: string]: IFormStatus\r\n}\r\n\r\nconst formStatusProps: IFormStatusProps = {\r\n    success: {\r\n        message: 'Submitted successfully.',\r\n        type: 'success',\r\n    },\r\n\r\n    error: {\r\n        message: 'Something went wrong. Please try again.',\r\n        type: 'error',\r\n    },\r\n\r\n    processing: {\r\n        message: 'Sending...',\r\n        type: 'processing',\r\n    },\r\n};\r\n\r\nconst FormikContainer: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n    const [newDataPoint, setNewDataPoint] = useState<DataPoint>({ x:'', avg: \"\", max: \"\", min: \"\"});\r\n    const [displayFormStatus, setDisplayFormStatus] = useState(false);\r\n    const [formStatus, setFormStatus] = useState<IFormStatus>({ message: '', type: ''});\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        if(formStatus.type === 'success')\r\n        dispatch(addNewData(newDataPoint))\r\n    },[newDataPoint]);\r\n\r\n    const createNewDataPoint = async (data: FormStatus, resetForm: Function) => {\r\n        try {\r\n            // API call integration will be here. Handle success / error response accordingly.\r\n            const dataObject: DataPoint = {x: data.date, avg: data.avg, min: data.min, max: data.max};\r\n            const response = await postDataPoint(dataObject);\r\n\r\n            if (response) {\r\n                setFormStatus(formStatusProps.success);\r\n                const parseTime = timeParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\r\n                const parsedData: DataPoint = {...data, x: parseTime(data.date)!};\r\n                setNewDataPoint(parsedData);\r\n                resetForm({})\r\n            }\r\n        } catch (error) {\r\n            const response = error.response;\r\n            if (\r\n                // Custom message from the server\r\n                response.data === 'data already exist' &&\r\n                response.status === 400\r\n            ) {\r\n                setFormStatus(formStatusProps.duplicate)\r\n            } else {\r\n                setFormStatus(formStatusProps.error)\r\n            }\r\n        } finally {\r\n            setDisplayFormStatus(true)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Formik\r\n                initialValues={{\r\n                    date: \"\",\r\n                    avg: \"\",\r\n                    min: \"\",\r\n                    max: \"\",\r\n                    seconds: \"\",\r\n                    milliseconds: \"\"\r\n                }}\r\n                onSubmit={(values: FormStatus, actions) => {\r\n                    setFormStatus(formStatusProps.processing);\r\n                    setDisplayFormStatus(true)\r\n                    // Concatenate seconds with milliseconds to match the dataPoint format at the endpoint\r\n                    const dateFormat : string = values.date!.concat(\":\", padding(values.seconds!.toString(), 2), \".\", padding(values.milliseconds!.toString(), 3), \"Z\");\r\n                    values.date = dateFormat;\r\n\r\n                    createNewDataPoint(values, actions.resetForm);\r\n                    setTimeout(() => {\r\n                        actions.setSubmitting(false)\r\n                    }, 500)\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    date: Yup.string().required(),\r\n                    avg: Yup.number().required().integer().max(99, 'Too much!').min(-99, 'Too little'),\r\n                    max: Yup.number().required().integer().max(99, 'Too much!').min(-99, 'Too little'),\r\n                    min: Yup.number().required().integer().max(99, 'Too much!').min(-99, 'Too little'),\r\n                    seconds: Yup.number().required().max(59, 'Too many!').min(0, 'Must be positive!'),\r\n                    milliseconds: Yup.number().required().max(999, 'Too many!').min(0, 'Must be positive!'),\r\n                })}\r\n            >\r\n                {(props: FormikProps<FormStatus>) => {\r\n                    const {\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        handleBlur,\r\n                        handleChange,\r\n                        isSubmitting,\r\n                    } = props;\r\n                    return (\r\n                        <Form>\r\n                            <h1 className={classes.title}>Insert a data point</h1>\r\n                            <Grid container justify=\"space-around\" direction=\"row\">\r\n                                <Grid item lg={5} md={5} sm={5} xs={5} className={classes.textField}>\r\n                                    <TextField\r\n                                        name=\"avg\"\r\n                                        id=\"avg\"\r\n                                        label=\"Average value\"\r\n                                        value={values.avg}\r\n                                        type=\"number\"\r\n                                        inputProps={{ maxLength: 3 }}\r\n                                        helperText={errors.avg && touched.avg ? capitalizeFirstLetter(errors.avg) : 'Enter average value'}\r\n                                        error={!!(errors.avg && touched.avg)}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={5} md={5} sm={5} xs={5} className={classes.textField}>\r\n                                    <TextField\r\n                                        name=\"max\"\r\n                                        id=\"max\"\r\n                                        label=\"Maximum\"\r\n                                        value={values.max}\r\n                                        type=\"number\"\r\n                                        inputProps={{ maxLength: 3 }}\r\n                                        helperText={errors.max && touched.max ? capitalizeFirstLetter(errors.max) : 'Enter maximum value'}\r\n                                        error={!!(errors.max && touched.max)}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={5} md={5} sm={5} xs={5} className={classes.textField}>\r\n                                    <TextField\r\n                                        name=\"min\"\r\n                                        id=\"min\"\r\n                                        label=\"Minimum\"\r\n                                        value={values.min}\r\n                                        type=\"number\"\r\n                                        inputProps={{ maxLength: 3 }}\r\n                                        helperText={errors.min && touched.min ? capitalizeFirstLetter(errors.min) : 'Enter minimum value'}\r\n                                        error={!!(errors.min && touched.min)}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={5} md={5} sm={5} xs={5} className={classes.textField}>\r\n                                    <TextField\r\n                                        id=\"datetime-local\"\r\n                                        name=\"date\"\r\n                                        label=\"Date\"\r\n                                        type=\"datetime-local\"\r\n                                        value={values.date}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        helperText={errors.date && touched.date ? capitalizeFirstLetter(errors.date) : 'Enter minimum value'}\r\n                                        error={!!(errors.date && touched.date)}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item lg={5} md={5} sm={5} xs={5}>\r\n                                    <TextField\r\n                                            name=\"seconds\"\r\n                                            id=\"Seconds\"\r\n                                            label=\"Seconds\"\r\n                                            value={values.seconds}\r\n                                            type=\"number\"\r\n                                            inputProps={{ maxLength: 2 }}\r\n                                            helperText={errors.seconds && touched.seconds ? capitalizeFirstLetter(errors.seconds) : 'Enter seconds'}\r\n                                            error={!!(errors.seconds && touched.seconds)}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                        />\r\n                                </Grid>\r\n                                <Grid item lg={5} md={5} sm={5} xs={5}>\r\n                                    <TextField\r\n                                            name=\"milliseconds\"\r\n                                            id=\"milliseconds\"\r\n                                            label=\"Milliseconds\"\r\n                                            value={values.milliseconds}\r\n                                            type=\"number\"\r\n                                            inputProps={{ maxLength: 3 }}\r\n                                            helperText={errors.milliseconds && touched.milliseconds ? capitalizeFirstLetter(errors.milliseconds) : 'Enter milliseconds'}\r\n                                            error={!!(errors.milliseconds && touched.milliseconds)}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                        />\r\n                                </Grid>\r\n                                <Grid item lg={10} md={10} sm={10} xs={10} className={classes.submitButton}>\r\n                                    <Button type=\"submit\" variant=\"contained\" color=\"secondary\" disabled={isSubmitting}>\r\n                                        Submit\r\n                                    </Button>\r\n                                    {displayFormStatus && (\r\n                                        <div className=\"formStatus\">\r\n                                            {\r\n                                                formStatus.type === 'processing' ? (\r\n                                                <p className={classes.successMessage}>\r\n                                                    {formStatus.message}\r\n                                                </p>\r\n                                            ) : formStatus.type === 'error' ? (\r\n                                                <p className={classes.errorMessage}>\r\n                                                    {formStatus.message}\r\n                                                </p>\r\n                                            ) : formStatus.type === 'success' ? (\r\n                                                <p className={classes.successMessage}>\r\n                                                    {formStatus.message}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                    )}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FormikContainer","import {ADD_NEW_DATA, FETCH_DATA, HIGHLIGHT_LINE} from \"./contentTypes\";\r\nimport {DataPoint, HighlightedLines} from \"../../App\";\r\n\r\n// Actions types\r\nexport type FetchDataAction = { type: typeof FETCH_DATA; payload: Array<DataPoint> };\r\nexport type AddNewDataAction = { type: typeof ADD_NEW_DATA; payload: DataPoint };\r\nexport type HighlightDataLines = { type: typeof HIGHLIGHT_LINE; payload: HighlightedLines };\r\n\r\n// Actions functions\r\nexport const fetchData = (data: Array<DataPoint>): FetchDataAction => {\r\n    return {\r\n        type: FETCH_DATA,\r\n        payload: data\r\n    }\r\n};\r\n\r\nexport const addNewData = (newData: DataPoint): AddNewDataAction => {\r\n    return {\r\n        type : ADD_NEW_DATA,\r\n        payload: newData\r\n    }\r\n};\r\n\r\nexport const highlightLines = (data: HighlightedLines): HighlightDataLines => {\r\n    return {\r\n        type : HIGHLIGHT_LINE,\r\n        payload: data\r\n    }\r\n};","import React, {useState, useEffect} from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {highlightLines} from \"../redux/content/contentActions\";\r\n\r\nfunction CustomCheckbox() {\r\n\r\n    const [state, setState] = useState({\r\n        avg: true,\r\n        max: true,\r\n        min: true,\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n        dispatch(highlightLines({ ...state, [event.target.name]: event.target.checked }))\r\n    };\r\n\r\n\r\n    return (\r\n        <FormGroup row>\r\n            <FormControlLabel\r\n                control={<Checkbox style={{color: \"#1f77b4\"}} checked={state.max} onChange={handleChange} name=\"max\" />}\r\n                label=\"Max\"\r\n            />\r\n            <FormControlLabel\r\n                control={<Checkbox style={{color: \"#ff7f0e\"}} checked={state.avg} onChange={handleChange} name=\"avg\" />}\r\n                label=\"Average\"\r\n            />\r\n            <FormControlLabel\r\n                control={<Checkbox style={{color: \"#2ca02c\"}} checked={state.min} onChange={handleChange} name=\"min\" />}\r\n                label=\"Min\"\r\n            />\r\n        </FormGroup>\r\n    );\r\n}\r\n\r\nexport default CustomCheckbox","import React from \"react\";\r\nimport \"./404.css\"\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <section className=\"page_404\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 \">\r\n                        <div className=\"col-sm-10 col-sm-offset-1  text-center\">\r\n                            <div className=\"four_zero_four_bg\">\r\n                                <h1 className=\"text-center \">404</h1>\r\n                            </div>\r\n                            <div className=\"contant_box_404\">\r\n                                <h3 className=\"h2\">Look like you're lost</h3>\r\n\r\n                                <p className={\"hint_404\"}>Maybe the page you are looking for has been removed, or you typed in the wrong URL</p>\r\n                                <a href=\"\" className=\"link_404\">Go to Home</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default ErrorMessage","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {fetchDataPoints} from \"./dataGetPost\";\nimport MultiLineChart from \"./components/multiLineChart\";\nimport {useSelector, useDispatch} from 'react-redux'\nimport {fetchData} from \"./redux/content/contentActions\";\nimport Modal from \"./components/inputModal/inputModal\";\nimport FormikContainer from \"./components/formikContainer\";\nimport CustomCheckbox from \"./components/checkbox\"\nimport Button from \"@material-ui/core/Button\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport ErrorMessage from \"./components/404\";\n\n\nexport type DataPoint = {\n    x: string | Date | \"\";\n    max: number | \"\";\n    avg: number | \"\";\n    min: number | \"\"\n\n}\nexport type DataPoints = {\n    data: Array<DataPoint>\n}\n\nexport type HighlightedLines = {\n    max: boolean,\n    avg: boolean,\n    min: boolean\n}\n\nfunction App() {\n\n    const data = useSelector<DataPoints, DataPoints[\"data\"]>((state: DataPoints) => state.data);\n    const highlightedLines = useSelector<HighlightedLines>((state: HighlightedLines) => state);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<boolean>(false);\n\n    const dispatch = useDispatch();\n\n    // load data at the first rendering\n    useEffect(() => {\n      fetchDataPoints().then(d => {\n          setIsLoading(false);\n          // dispatch data to store if data was fetched successfully\n          d.length === 0 ? setError(true) : dispatch(fetchData(d));\n      });\n    },[]);\n\n\n   const [isModalOpen, setModalState] = useState(false);\n   const toggleModal = () => setModalState(!isModalOpen);\n\n    if(isLoading)\n        return <Loader type=\"Bars\" color=\"#00BFFF\" height={600}/>;\n    if(error)\n        return <ErrorMessage/>;\n\n  return (\n    <div className=\"App\">\n        <MultiLineChart data={data} highlightedLines={highlightedLines}/>\n\n        <div style={{marginTop: \"50px\"}}>\n            <CustomCheckbox />\n            <Button variant=\"contained\" color=\"primary\" onClick={toggleModal}>Add new data!</Button>\n        </div>\n        <Modal isOpen={isModalOpen} onClose={toggleModal}>\n            <FormikContainer/>\n        </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import {FETCH_DATA, ADD_NEW_DATA, HIGHLIGHT_LINE} from \"./contentTypes\";\r\nimport {FetchDataAction, AddNewDataAction, HighlightDataLines} from \"./contentActions\";\r\nimport { DataPoints} from \"../../App\";\r\n\r\nconst initialState = {\r\n    data: [],\r\n    lines: {\r\n        max: true,\r\n        avg: true,\r\n        min: true\r\n    },\r\n};\r\n\r\nconst dataReducer = (state: DataPoints = initialState, action: FetchDataAction | AddNewDataAction | HighlightDataLines) => {\r\n    switch(action.type) {\r\n        case FETCH_DATA:\r\n            return {...state, data: action.payload};\r\n\r\n        case ADD_NEW_DATA:\r\n            return {...state, data: [...state.data, action.payload]};\r\n\r\n        case HIGHLIGHT_LINE:\r\n            return {...state, lines: action.payload};\r\n\r\n        default: return state\r\n    }\r\n};\r\n\r\nexport default dataReducer","import { createStore } from 'redux';\r\nimport dataReducer from \"./content/dataReducer\";\r\n\r\nconst store = createStore(dataReducer);\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\"\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}